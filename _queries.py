def getBankruptcyDataByCompany():
    query = "select " 
    query += "t1.* "
    query += ",(case when t2.company_id is not null then 1 else 0 end) as observed_flag "
    query += ",(case when t3.company_id is not null then 1 else 0 end) as deleted_flag "
    query += ",(case when t4.company_id is not null then 1 else 0 end) as faillite_flag "
    query += ",(case when t5.company_id is not null then 1 else 0 end) as bankrupcty_flag "
    query += ",(case when t6.company_id is not null then 1 else 0 end) as voluntary_flag " 
    query += ",t5.process_startdate as bankrupcty_date "
    query += ",t6.process_startdate as voluntary_date "
    query += ",t4.filing_date_parsed as filing_date_parsed "
    query += ",t2.legal_observation "
    query += ",t3.deletion_time "
    query += "from  "
    query += "(SELECT c.* "
    query += "FROM companies c "
    query += "LEFT JOIN nace_mapping nm on c.nace_id = nm.nace_id "
    query += "LEFT JOIN legal_form lf on c.legal_form_id = lf.legal_form_id "
    query += "WHERE  "
    query += "nm.level_1 NOT IN ('K', 'O', 'U') " 
    query += "AND lf.name IN ( "
    query += "'Société à responsabilité limitée', "
    query += "'Société anonyme', "
    query += "'Société à responsabilité limitée simplifiée' "
    query += ")) t1 "
    query += "left join ( "
    query += "select company_id, legal_observation "
    query += "from observed_companies "
    query += "where legal_observation like '%insolvabilité%' or legal_observation like '%faillite%' "
    query += ") t2 "
    query += "on t1.company_id = t2.company_id "
    query += "left join deleted_companies t3 "
    query += "on t1.company_id = t3.company_id "
    query += "left join( "
    query += "select company_id "
    query += ",filing_date_parsed "
    query += "from ( "
    query += "select t.company_id "
    query += ",t.filing_date_parsed "
    query += ",ROW_NUMBER()over(partition by t.company_id order by filing_date_parsed asc) as rn "
    query += "from documents t  "
    query += "where t.details like '%faillite%'  "
    query += "and t.correction_details is null  "
    query += "and t.details<>'Confirmation du rabattement de la faillite suite à appel contre le jugement rendu sur opposition') h "
    query += "where h.rn=1 "
    query += ") t4 "
    query += "on t1.company_id = t4.company_id "
    query += "left join( "
    query += "SELECT  "
    query += "t.company_id, "
    query += "t.document_id, "
    query += "t.filing_date_parsed as process_startdate "
    query += "FROM (SELECT "
    query += "c.company_id, "
    query += "doc.document_id, "
    query += "doc.filing_date_parsed, "
    query += "ROW_NUMBER() OVER (PARTITION BY c.rcs ORDER BY doc.filing_date_parsed ASC) as rank "
    query += "FROM documents doc "
    query += "INNER JOIN companies c on doc.company_id = c.company_id "
    query += "INNER JOIN document_type dt on doc.document_type_id = dt.document_type_id "
    query += "WHERE dt.name LIKE 'Court order%' AND doc.filing_date_parsed IS NOT NULL) t "
    query += "WHERE t.rank = 1) t5 "
    query += "on t1.company_id = t5.company_id "
    query += "left join "
    query += "(SELECT  "
    query += "t.company_id, "
    query += "t.document_id, "
    query += "t.filing_date_parsed as process_startdate "
    query += "FROM (SELECT "
    query += "c.company_id, "
    query += "doc.document_id, "
    query += "doc.filing_date_parsed, "
    query += "ROW_NUMBER() OVER (PARTITION BY c.rcs ORDER BY doc.filing_date_parsed ASC) as rank "
    query += "FROM documents doc "
    query += "INNER JOIN companies c on doc.company_id = c.company_id "
    query += "INNER JOIN document_type dt on doc.document_type_id = dt.document_type_id "
    query += "WHERE doc.details LIKE '%Voluntary%' AND doc.filing_date_parsed IS NOT NULL) t "
    query += "WHERE t.rank = 1 "
    query += ") t6 on t1.company_id = t6.company_id"
    
    return query

def getBankruptcyDataByDocument(): 
    query = "SELECT " 
    query += "t1.company_id "
    query += ",t1.rcs "
    query += ",t1.nace_id "
    query += ",t1.registration_date "
    query += ",(case when t2.company_id is not null then 1 else 0 end) as observed_flag "
    query += ",(case when t3.company_id is not null then 1 else 0 end) as deleted_flag "
    query += ",(case when t4.company_id is not null then 1 else 0 end) as faillite_flag "
    query += ",(case when t5.company_id is not null then 1 else 0 end) as bankrupcty_flag "
    query += ",(case when t6.company_id is not null then 1 else 0 end) as voluntary_flag     "
    query += ",t2.legal_observation "
    query += ",t3.deletion_time "
    query += ",(case when t5.bankrupcy_process_startdate is not null then t5.bankrupcy_process_startdate "
    query += "    when t4.filing_date_parsed is not null then t4.filing_date_parsed "
    query += "    when t6.liquidation_process_startdate is not null then t6.liquidation_process_startdate else null end) as filing_date_parsed "
    query += ",h.document_id "
    query += ",h.document_type_id "
    query += ",h.filing_date "
    query += ",h.details "
    query += ",h.link "
    query += "from  "
    query += "(SELECT c.* "
    query += "FROM companies c "
    query += "LEFT JOIN nace_mapping nm on c.nace_id = nm.nace_id "
    query += "LEFT JOIN legal_form lf on c.legal_form_id = lf.legal_form_id "
    query += "WHERE  "
    query += "    nm.level_1 NOT IN ('K', 'O', 'U')  "
    query += "    AND lf.name IN ( "
    query += "        'Société à responsabilité limitée', "
    query += "        'Société anonyme', "
    query += "        'Société à responsabilité limitée simplifiée' "
    query += "    ) "
    query += ") t1 "
    query += "left join  "
    query += "( "
    query += "select company_id, legal_observation "
    query += "from observed_companies "
    query += "where legal_observation like '%insolvabilité%' or legal_observation like '%faillite%' "
    query += ") t2 "
    query += "on t1.company_id = t2.company_id "
    query += "left join deleted_companies t3 "
    query += "on t1.company_id = t3.company_id "
    query += "left join "
    query += "( "
    query += "select company_id "
    query += ",filing_date_parsed "
    query += "from ( "
    query += "select t.company_id "
    query += ",t.filing_date_parsed "
    query += ",ROW_NUMBER()over(partition by t.company_id order by filing_date_parsed asc) as rn "
    query += "from documents t  "
    query += "where t.details like '%faillite%'  "
    query += "and t.correction_details is null  "
    query += "and t.details<>'Confirmation du rabattement de la faillite suite à appel contre le jugement rendu sur opposition') h  "
    query += "where h.rn=1 "
    query += ") t4 "
    query += "on t1.company_id = t4.company_id "
    query += "left join "
    query += "( "
    query += "SELECT  "
    query += "                t.company_id, "
    query += "                t.document_id, "
    query += "                t.filing_date_parsed as bankrupcy_process_startdate "
    query += "FROM ( "
    query += "                SELECT "
    query += "                                c.company_id, "
    query += "                            doc.document_id, "
    query += "                            doc.filing_date_parsed, "
    query += "                            ROW_NUMBER() OVER (PARTITION BY c.rcs ORDER BY doc.filing_date_parsed ASC) as rank "
    query += "            FROM documents doc "
    query += "            INNER JOIN companies c on doc.company_id = c.company_id "
    query += "            INNER JOIN document_type dt on doc.document_type_id = dt.document_type_id "
    query += "            WHERE dt.name LIKE 'Court order%' AND doc.filing_date_parsed IS NOT NULL) t "
    query += "WHERE t.rank = 1 "
    query += ") t5 "
    query += "on t1.company_id = t5.company_id "
    query += "left join "
    query += "(SELECT  "
    query += "            t.company_id, "
    query += "            t.document_id, "
    query += "            t.filing_date_parsed as liquidation_process_startdate "
    query += "FROM ( "
    query += "            SELECT "
    query += "                                c.company_id, "
    query += "                                doc.document_id, "
    query += "                                doc.filing_date_parsed, "
    query += "                                ROW_NUMBER() OVER (PARTITION BY c.rcs ORDER BY doc.filing_date_parsed ASC) as rank "
    query += "                FROM documents doc "
    query += "                INNER JOIN companies c on doc.company_id = c.company_id "
    query += "                INNER JOIN document_type dt on doc.document_type_id = dt.document_type_id "
    query += "                WHERE doc.details LIKE '%Voluntary%' AND doc.filing_date_parsed IS NOT NULL) t "
    query += "WHERE t.rank = 1 "
    query += ") t6 "
    query += "on t1.company_id = t6.company_id "
    query += "left join "
    query += "( "
    query += "    SELECT t.* "
    query += "FROM documents t "
    query += ") h "
    query += "on t1.company_id = h.company_id "
    
    return query

def getDocumentsPerCompany():
    query = "SELECT  rc.name, rc.company_id, aa_doc.company_id, year(max_doc.annual_Accounts_from) as max_aa, aa_doc.filename, year(aa_doc.annual_Accounts_from) as doc_aa "
    query += "FROM relevant_companies rc " 
    query += "LEFT JOIN bankrupted_companies bc on bc.company_id=rc.company_id  "
    query += "INNER JOIN  "
    query += "(SELECT MAX(annual_accounts_from) AS annual_accounts_from, company_id, document_type_id "
    query += "FROM documents "
    query += "WHERE document_type_id = 3  "
    query += "GROUP BY company_id,document_type_id) t ON t.company_id = rc.company_id  "
    query += "INNER JOIN documents max_doc ON max_doc.company_id =rc.company_id AND max_doc.annual_accounts_from=t.annual_accounts_from AND t.document_type_id = max_doc.document_type_id "
    query += "INNER JOIN  "
    query += "(SELECT annual_accounts_from,filename, company_id "
    query += "FROM documents "
    query += "WHERE document_type_id = 3) as aa_doc "
    query += "ON aa_doc.company_id = rc.company_id  "
    query += "ORDER BY rc.company_id,  year(aa_doc.annual_Accounts_from) "

    return query

def getDocumentLinksPerDocType(documentType):
    query = "SELECT "
    query += "    dt.name, doc.link "
    query += " FROM documents doc  "
    query += " INNER JOIN document_type dt ON doc.document_type_id = dt.document_type_id " 
    query += " WHERE lower(dt.name) LIKE '%" + str(documentType.lower()) + "%'" 
    return query


def getDocumentLinkPerFileName(filename):
    query = "SELECT link FROM documents where filename IN " +"('" + "','".join(filename) + "')"
    return query

def getNormalizationAmountPerCompany():
    query = "SELECT doc.company_id, "
    query += "ABS(MAX(CASE WHEN cap.fid_301 IS NOT NULL THEN cap.fid_301 ELSE CASE WHEN cap.fid_405 IS NULL THEN 1 ELSE cap.fid_405 END END)) +1 AS amount "
    query += "FROM dbo.bs_capital_ec cap "
    query += "INNER JOIN documents doc ON doc.document_id = cap.document_id "
    query += "INNER JOIN relevant_companies c ON c.company_id = doc.company_id "
    query += "INNER JOIN nace n ON n.nace_id = c.nace_id "
    query += "GROUP BY doc.company_id "
    return query

def getCompaniesFilteredByAccountMinAmount(min_ammount=500000000, account_number='fid_201'):
    query = "SELECT DISTINCT l.legal_form_id, l.name as legal_form, c.company_id, c.rcs, c.name as company_name, c.nace_id, n.name as nace,  doc.link, doc.filename, doc.annual_accounts_from "
    query += "FROM bs_assets_ec bs "
    query += "INNER JOIN documents doc ON doc.document_id = bs.document_id "
    query += "INNER JOIN companies c ON c.company_id = doc.company_id "
    query += "INNER JOIN nace n ON c.nace_id = n.nace_id "
    query += "INNER JOIN legal_form l ON l.legal_form_id = c.legal_form_id "
    query += "INNER JOIN (SELECT company_id, MAX(YEAR(filing_date_parsed)) as year "
    query += "FROM documents doc  "
    query += "WHERE document_Type_id =3 "
    query += "GROUP BY company_id) AS temp_docs ON temp_docs.company_id = c.company_id and YEAR(doc.filing_date_parsed) = temp_docs.year "
    query += f"where  {account_number} > {min_ammount} AND document_Type_id =3 "

    return query

def getAllDocumentLinksForCompanies(company_list):
    query = "SELECT doc.link FROM documents doc where company_id IN ("
    query += ",".join(company_list)
    query += ")"

    return query 

def getFlagDocumentsForFilter(filter):
    query = "SELECT c.company_id, rcs, doc.document_id, doc.filename, type_info, pages FROM documents_info_log log "
    query += "INNER JOIN documents_for_processing  dp ON log.document_id = dp.document_id "
    query += "INNER JOIN documents doc ON doc.document_id = dp.document_id "
    query += "INNER JOIN companies c ON c.company_id = doc.company_id "
    query += f"WHERE pages !='1' and type_info like '%{filter}%' "

    return query